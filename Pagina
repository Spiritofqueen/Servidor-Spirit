from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'clave_super_secreta'

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Clase Usuario para autenticación
class User(UserMixin):
    def __init__(self, id, username):
        self.id = id
        self.username = username

@login_manager.user_loader
def load_user(user_id):
    conn = sqlite3.connect('reservas.db')
    c = conn.cursor()
    c.execute('SELECT id, username FROM usuarios WHERE id = ?', (user_id,))
    user = c.fetchone()
    conn.close()
    if user:
        return User(user[0], user[1])
    return None

# Inicialización de la base de datos con tablas de usuarios y reservas
def init_db():
    conn = sqlite3.connect('reservas.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS reservas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fecha TEXT NOT NULL,
            user_id INTEGER,
            FOREIGN KEY(user_id) REFERENCES usuarios(id)
        )
    ''')
    conn.commit()
    conn.close()

# Ruta principal con autenticación
@app.route('/')
@login_required
def index():
    return render_template('index.html', username=current_user.username)

# Ruta para el login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = sqlite3.connect('reservas.db')
        c = conn.cursor()
        c.execute('SELECT id, password FROM usuarios WHERE username = ?', (username,))
        user = c.fetchone()
        conn.close()

        if user and check_password_hash(user[1], password):
            user_obj = User(user[0], username)
            login_user(user_obj)
            return redirect(url_for('index'))
        else:
            flash('Usuario o contraseña incorrectos')
    
    return render_template('login.html')

# Ruta para el registro
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = generate_password_hash(request.form['password'])
        
        conn = sqlite3.connect('reservas.db')
        c = conn.cursor()
        c.execute('INSERT INTO usuarios (username, password) VALUES (?, ?)', (username, password))
        conn.commit()
        conn.close()

        flash('Usuario registrado exitosamente. Ahora puedes iniciar sesión.')
        return redirect(url_for('login'))
    
    return render_template('register.html')

# Ruta para cerrar sesión
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Ruta para obtener las reservas (ahora asociadas a usuarios)
@app.route('/reservas', methods=['GET'])
@login_required
def obtener_reservas():
    conn = sqlite3.connect('reservas.db')
    c = conn.cursor()
    c.execute('SELECT fecha FROM reservas WHERE user_id = ?', (current_user.id,))
    reservas = c.fetchall()
    conn.close()

    eventos = [{"title": "Reservado", "start": reserva[0]} for reserva in reservas]
    return jsonify(eventos)

# Ruta para añadir una nueva reserva
@app.route('/reservar', methods=['POST'])
@login_required
def reservar():
    fecha = request.json['fecha']
    
    conn = sqlite3.connect('reservas.db')
    c = conn.cursor()
    c.execute('INSERT INTO reservas (fecha, user_id) VALUES (?, ?)', (fecha, current_user.id))
    conn.commit()
    conn.close()
    
    return jsonify({"message": "Reserva creada", "fecha": fecha})

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
